package test;

import java.io.InputStream;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import com.ibm.integration.test.v1.NodeSpy;
import com.ibm.integration.test.v1.SpyObjectReference;
import com.ibm.integration.test.v1.TestMessageAssembly;
import com.ibm.integration.test.v1.TestSetup;
import com.ibm.integration.test.v1.exception.TestException;

import static com.ibm.integration.test.v1.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class Createcustomer_postCreatecustomer_Set_up_desitination_0001_Test {

	/*
	 * Createcustomer_postCreatecustomer_Set_up_desitination_0001_Test
	 * Test generated by IBM App Connect Enterprise Toolkit 12.0.4.0 on Jul 1, 2022 11:44:10 AM
	 */

	@AfterEach
	public void cleanupTest() throws TestException {
		// Ensure any mocks created by a test are cleared after the test runs 
		TestSetup.restoreAllMocks();
	}

	@Test
	public void createcustomer_postCreatecustomer_Set_up_desitination_TestCase_001() throws TestException {

		// Define the SpyObjectReference
		SpyObjectReference nodeReference = new SpyObjectReference().application("createcustomer")
				.messageFlow("gen.createcustomer").subflowNode("postCreatecustomer (Implementation)")
				.node("Set up desitination");

		// Initialise a NodeSpy
		NodeSpy nodeSpy = new NodeSpy(nodeReference);

		// Declare a new TestMessageAssembly object for the message being sent into the node
		TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

		// Add Local Environment to Message Assembly for HTTP
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[0]").setValue("createcustomerrestcallingws");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[1]").setValue("v1");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[2]").setValue("createcustomer");

		// Add Local Environment to Message Assembly for REST
		inputMessageAssembly.localEnvironmentPath("REST.Input.Method").setValue("POST");
		inputMessageAssembly.localEnvironmentPath("REST.Input.Operation").setValue("postCreatecustomer");
		inputMessageAssembly.localEnvironmentPath("REST.Input.Path")
				.setValue("/createcustomerrestcallingws/v1/createcustomer");
		inputMessageAssembly.localEnvironmentPath("REST.Input.URI")
				.setValue("/createcustomerrestcallingws/v1/createcustomer");

		// Call the message flow node with the Message Assembly
		nodeSpy.evaluate(inputMessageAssembly, true, "in");

		// Assert the number of times that the node is called
		assertThat(nodeSpy, nodeCallCountIs(1));

		// Assert the terminal propagate count for the message
		assertThat(nodeSpy, terminalPropagateCountIs("out", 1));
		
		TestMessageAssembly actualMessageAssembly = null;
		
		// Get the TestMessageAssembly object for the actual propagated message
		actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

		// Assert output message body data
        assertEquals("dummy", actualMessageAssembly.localEnvironmentPath("Destination.SOAP.Request.Transport.HTTP.WebServiceURL").getStringValue());

	}

}
